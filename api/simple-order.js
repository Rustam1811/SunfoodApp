// api/simple-order.js - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const admin = require("firebase-admin");

if (!admin.apps.length) {
    try {
        const b64 = process.env.FIREBASE_KEY_BASE64;
        if (b64) {
            const serviceAccount = JSON.parse(
                Buffer.from(b64, "base64").toString("utf8")
            );
            if (serviceAccount.private_key) {
                serviceAccount.private_key = serviceAccount.private_key.replace(/\\n/g, "\n");
            }
            admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
            });
        } else {
            const serviceAccount = require('../firebase-key.json');
            admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error);
    }
}

const db = admin.firestore();

module.exports = async function handler(req, res) {
    // CORS
    res.setHeader("Access-Control-Allow-Origin", "*");
    res.setHeader("Access-Control-Allow-Methods", "GET,POST,OPTIONS");
    res.setHeader("Access-Control-Allow-Headers", "Content-Type");
    if (req.method === "OPTIONS") return res.status(200).end();

    try {
        if (req.method === "POST") {
            const { userId, items, amount, bonusUsed = 0 } = req.body;

            console.log('üî• –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑:', { userId, items, amount, bonusUsed });

            if (!userId || !Array.isArray(items) || typeof amount !== "number") {
                return res.status(400).json({ error: "Invalid body" });
            }

            // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            const bonusEarned = Math.floor(amount * 0.1); // 10% –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

            console.log('üî• –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:', bonusEarned);

            // 1) –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
            const orderRef = await db.collection("orders").add({
                userId,
                items,
                amount,
                bonusUsed,
                bonusEarned,
                status: 'pending',
                createdAt: admin.firestore.FieldValue.serverTimestamp(),
            });

            console.log('üî• –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', orderRef.id);

            // 2) –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userRef = db.collection('users').doc(userId);
            const userDoc = await userRef.get();
            const currentBalance = userDoc.exists ? (userDoc.data().bonusBalance || 0) : 0;

            console.log('üî• –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', currentBalance);

            // 3) –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            const newBalance = currentBalance + bonusEarned - bonusUsed;
            await userRef.set({
                bonusBalance: newBalance,
                totalOrders: userDoc.exists ? (userDoc.data().totalOrders || 0) + 1 : 1,
                level: '–¢–µ—Å—Ç–æ–≤—ã–π',
                lastOrderAt: admin.firestore.FieldValue.serverTimestamp()
            }, { merge: true });

            console.log('üî• –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:', newBalance);

            // 4) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤
            if (bonusEarned > 0) {
                await db.collection('bonusHistory').add({
                    userId: userId,
                    type: 'earned',
                    amount: bonusEarned,
                    description: `–ó–∞–∫–∞–∑ #${orderRef.id.slice(-6)}`,
                    date: new Date().toISOString(),
                    orderId: orderRef.id
                });
                console.log('üî• –ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–∞');
            }

            if (bonusUsed > 0) {
                await db.collection('bonusHistory').add({
                    userId: userId,
                    type: 'spent',
                    amount: bonusUsed,
                    description: `–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #${orderRef.id.slice(-6)}`,
                    date: new Date().toISOString(),
                    orderId: orderRef.id
                });
                console.log('üî• –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞—Ç –∑–∞–ø–∏—Å–∞–Ω–∞');
            }

            console.log('üî• –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');

            return res.status(200).json({
                success: true,
                bonusEarned,
                oldBalance: currentBalance,
                newBalance,
                orderId: orderRef.id,
                message: `–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–∞—á–∏—Å–ª–µ–Ω–æ ${bonusEarned} –±–æ–Ω—É—Å–æ–≤`
            });
        }

        res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
    } catch (error) {
        console.error('üî• –û—à–∏–±–∫–∞ –≤ simple-order:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            details: error.message,
            stack: error.stack
        });
    }
};
