const express = require('express');
const router = express.Router();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin (–µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
let admin;
try {
  admin = require('firebase-admin');
  if (!admin.apps.length) {
    // –ß–∏—Ç–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const serviceAccount = JSON.parse(
      Buffer.from(process.env.FIREBASE_KEY_BASE64, 'base64').toString('utf-8')
    );
    
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount)
    });
  }
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error);
}

const db = admin.firestore();

// GET /api/promotions - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏
router.get('/', async (req, res) => {
  try {
    console.log('üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ü–∏–π...');
    
    const promotionsSnapshot = await db
      .collection('promotions')
      .where('isActive', '==', true)
      .get();

    let promotions = promotionsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Timestamp –≤ –æ–±—ã—á–Ω—É—é –¥–∞—Ç—É –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      startDate: doc.data().startDate?.toDate?.() || doc.data().startDate,
      endDate: doc.data().endDate?.toDate?.() || doc.data().endDate,
      createdAt: doc.data().createdAt?.toDate?.() || doc.data().createdAt
    }));

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const now = new Date();
    promotions = promotions.filter(promo => {
      const startDate = new Date(promo.startDate);
      const endDate = new Date(promo.endDate);
      
      return now >= startDate && 
             now <= endDate &&
             (!promo.usageLimit || promo.usedCount < promo.usageLimit);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    promotions = promotions.sort((a, b) => {
      const dateA = new Date(a.createdAt);
      const dateB = new Date(b.createdAt);
      return dateB.getTime() - dateA.getTime();
    });

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${promotions.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π`);
    res.json({ promotions });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ü–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// POST /api/promotions - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–∫—Ü–∏—é
router.post('/', async (req, res) => {
  try {
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏...');
    
    const promotionData = {
      ...req.body,
      createdAt: admin.firestore.Timestamp.now(),
      usedCount: 0,
      isActive: req.body.isActive !== false
    };

    const docRef = await db.collection('promotions').add(promotionData);
    
    console.log(`‚úÖ –ê–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${docRef.id}`);
    res.json({ id: docRef.id, ...promotionData });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// PUT /api/promotions/:id - –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ü–∏—é
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏ ${id}...`);
    
    const updateData = {
      ...req.body,
      updatedAt: admin.firestore.Timestamp.now()
    };
    
    delete updateData.id;

    await db.collection('promotions').doc(id).update(updateData);
    
    console.log(`‚úÖ –ê–∫—Ü–∏—è ${id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
    res.json({ success: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// DELETE /api/promotions/:id - —É–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏ ${id}...`);
    
    await db.collection('promotions').doc(id).delete();
    
    console.log(`‚úÖ –ê–∫—Ü–∏—è ${id} —É–¥–∞–ª–µ–Ω–∞`);
    res.json({ success: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// POST /api/promotions/:id/use - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ü–∏—é (—É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫)
router.post('/:id/use', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ ${id}...`);
    
    await db.collection('promotions').doc(id).update({
      usedCount: admin.firestore.FieldValue.increment(1)
    });
    
    console.log(`‚úÖ –ê–∫—Ü–∏—è ${id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞`);
    res.json({ success: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–∫—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;
