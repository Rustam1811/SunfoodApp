import React, { useState, useEffect, useCallback } from "react";
import { useHistory } from "react-router-dom";
import { motion, AnimatePresence } from "framer-motion";
import { ShoppingCartIcon, CheckCircleIcon, PlusIcon, MinusIcon, ArrowPathIcon } from '@heroicons/react/24/solid';
import { SparklesIcon } from '@heroicons/react/24/outline';
import { useCart, CartItem } from "../contexts/CartContext";
import QRCode from "../components/QRCode";
import OrderStatusBadge from "../components/OrderStatusBadge";

const API = import.meta.env.VITE_BACKEND_URL;

const CartItemCard = ({ item, onUpdateQuantity }: { item: CartItem; onUpdateQuantity: (id: number, delta: number) => void; }) => (
    <motion.div layout initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, x: -20, transition: { duration: 0.2 } }}
        className="bg-zinc-800/50 rounded-2xl p-4 flex items-center gap-4 border border-zinc-700/50">
        {item.image && <img src={item.image} alt={item.name} className="w-16 h-16 rounded-lg object-contain bg-zinc-700/50 p-1 flex-shrink-0" />}
        <div className="flex-grow">
            <p className="font-bold text-white">{item.name}</p>
            <p className="text-sm text-zinc-400">{item.price} ‚Ç∏ / —à—Ç.</p>
        </div>
        <div className="flex items-center gap-3">
            <button onClick={() => onUpdateQuantity(item.id, -1)} className="w-8 h-8 bg-zinc-700 rounded-lg text-zinc-300 hover:bg-zinc-600 disabled:opacity-50 transition-colors"><MinusIcon className="w-5 h-5 mx-auto"/></button>
            <span className="w-8 text-center font-bold text-lg text-white">{item.quantity}</span>
            <button onClick={() => onUpdateQuantity(item.id, 1)} className="w-8 h-8 bg-zinc-700 rounded-lg text-zinc-300 hover:bg-zinc-600 transition-colors"><PlusIcon className="w-5 h-5 mx-auto"/></button>
        </div>
    </motion.div>
);

const EmptyCartState = ({ onGoToMenu }: { onGoToMenu: () => void; }) => (
    <div className="flex flex-col items-center gap-4 text-center py-16">
        <div className="w-24 h-24 bg-zinc-800/80 rounded-full flex items-center justify-center border border-zinc-700">
            <ShoppingCartIcon className="w-12 h-12 text-zinc-500" />
        </div>
        <h3 className="text-xl font-bold text-white">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h3>
        <p className="text-zinc-400 max-w-xs">–°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤–∫—É—Å–Ω–æ–µ –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é.</p>
        <motion.button whileTap={{ scale: 0.95 }} onClick={onGoToMenu}
            className="mt-4 bg-zinc-800 font-semibold py-3 px-6 rounded-xl shadow-lg border border-zinc-700 hover:bg-zinc-700 transition-colors text-white">
            –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é
        </motion.button>
    </div>
);

const Order: React.FC = () => {
    // –í—Å—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const { items, dispatch } = useCart();
    const [bonusPoints, setBonusPoints] = useState(0);
    const [bonusToUse, setBonusToUse] = useState(0);
    const [showToast, setShowToast] = useState(false);
    const [toastMessage, setToastMessage] = useState("");
    const [loading, setLoading] = useState(false);
    const [orders, setOrders] = useState([]);
    const history = useHistory();
    const amount = items.reduce((sum, x) => sum + x.price * x.quantity, 0);
    const bonusEarned = Math.floor(amount * 0.05);
    
    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ localStorage
    const getUserId = () => {
        try {
            const userData = localStorage.getItem('user');
            if (userData) {
                const user = JSON.parse(userData);
                return user.phone || user.id || '+77071234567';
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user –∏–∑ localStorage:', e);
        }
        return '+77071234567'; // fallback
    };
    
    const userId = getUserId();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const fetchOrders = useCallback(async () => {
        try {
            const res = await fetch(`/api/orders?userId=${userId}`);
            if (!res.ok) return;
            const data = await res.json();
            // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–±—ä–µ–∫—Ç —Å orders –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
            const ordersArray = Array.isArray(data) ? data : data.orders || [];
            setOrders(ordersArray);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
        }
    }, [userId]);

    useEffect(() => {
        fetchOrders();
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        const interval = setInterval(fetchOrders, 5000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        return () => clearInterval(interval);
    }, [fetchOrders]);

    // ...–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞...
    const handleUpdateQuantity = useCallback((id: number, delta: number) => {
        const type = delta > 0 ? 'INCREASE_QUANTITY' : 'DECREASE_QUANTITY';
        dispatch({ type, payload: id });
    }, [dispatch]);

    const handleOrder = async () => {
        if (items.length === 0) return;
        
        setLoading(true);
        try {
            const orderData = {
                userId,
                items: items.map(item => ({
                    name: item.name,
                    price: item.price,
                    quantity: item.quantity,
                    id: item.id
                })),
                amount: amount - bonusToUse,
                bonusUsed: bonusToUse
            };

            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑:', orderData); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

            const response = await fetch('/api/orders', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderData)
            });

            const result = await response.json();
            console.log('–û—Ç–≤–µ—Ç API:', result); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

            if (response.ok) {
                // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
                dispatch({ type: 'CLEAR_CART' });
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                await fetchOrders();
                alert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
            } else {
                console.error('–û—à–∏–±–∫–∞ API:', result);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="bg-zinc-900 min-h-screen font-sans text-white">
            <header className="p-5 bg-zinc-900/70 backdrop-blur-lg sticky top-0 z-10 border-b border-zinc-800">
                <h1 className="text-2xl font-extrabold text-white text-center">–í–∞—à –∑–∞–∫–∞–∑</h1>
            </header>
            <main className="p-5 space-y-6 pb-28">
                {/* –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ */}
                <section className="mb-8">
                    <h2 className="text-lg font-bold mb-2">–ú–æ–∏ –∑–∞–∫–∞–∑—ã</h2>
                    {orders.length === 0 ? (
                        <div className="text-zinc-400">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</div>
                    ) : (
                        <ul className="space-y-3">
                            {orders.map(order => (
                                <li key={order.id} className="bg-zinc-800/60 rounded-xl p-4 border border-zinc-700">
                                    <div className="flex justify-between items-center mb-2">
                                        <span className="font-bold text-white">–ó–∞–∫–∞–∑ #{order.id.slice(-6)}</span>
                                        <OrderStatusBadge status={order.status as 'pending' | 'accepted' | 'ready' | 'completed'} />
                                    </div>
                                    <div className="text-sm text-zinc-300 mb-1">–°—É–º–º–∞: <span className="font-bold text-white">{order.amount} ‚Ç∏</span></div>
                                    <div className="text-xs text-zinc-400">{order.date ? new Date(order.date).toLocaleString() : '–í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
                                    {order.status === 'ready' && (
                                        <div className="mt-3 p-4 bg-amber-500/10 rounded-xl border border-amber-500/30">
                                            <div className="text-amber-400 text-sm font-bold mb-3 text-center">üî• –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! –ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –Ω–∞ –∫–∞—Å—Å–µ:</div>
                                            <div className="flex justify-center">
                                                <QRCode value={`ORDER:${order.id}`} size={120} />
                                            </div>
                                        </div>
                                    )}
                                </li>
                            ))}
                        </ul>
                    )}
                </section>

                {/* –¢–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è */}
                <section>
                    <h2 className="text-lg font-bold mb-2">–ö–æ—Ä–∑–∏–Ω–∞</h2>
                    <AnimatePresence>
                        {items.length === 0 ? (
                            <EmptyCartState onGoToMenu={() => history.push("/menu")} />
                        ) : (
                            <motion.div initial={{opacity: 0}} animate={{opacity: 1}} exit={{opacity: 0}} className="space-y-6">
                                <motion.ul layout className="space-y-3">
                                    {items.map((it: CartItem) => (
                                        <CartItemCard key={it.id} item={it} onUpdateQuantity={handleUpdateQuantity} />
                                    ))}
                                </motion.ul>
                                <div className="bg-zinc-800/50 rounded-2xl shadow-lg border border-zinc-700/50 p-6 space-y-4">
                                    <div className="flex justify-between items-center text-zinc-400">
                                        <span>–°—É–º–º–∞</span>
                                        <span className="font-medium text-white">{amount} ‚Ç∏</span>
                                    </div>
                                    <div className="flex justify-between items-center text-zinc-400">
                                        <span>–ë–æ–Ω—É—Å—ã –∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é</span>
                                        <span className="font-medium text-emerald-400 flex items-center gap-1"><SparklesIcon className="w-4 h-4" /> +{bonusEarned}</span>
                                    </div>
                                    <div className="border-t border-zinc-700 my-2" />
                                    <div className="flex justify-between items-center text-zinc-400">
                                        <span>–°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã</span>
                                        <span className="font-medium text-orange-400">-{bonusToUse} ‚Ç∏</span>
                                    </div>
                                    <input type="range" min={0} max={Math.min(bonusPoints, amount)} value={bonusToUse} disabled={loading}
                                        onChange={(e) => setBonusToUse(Number(e.target.value))}
                                        className="w-full h-2 bg-zinc-700 rounded-lg appearance-none cursor-pointer accent-orange-500" />
                                    <div className="border-t border-zinc-700 my-2" />
                                    <div className="flex justify-between items-center font-bold text-xl text-white">
                                        <span>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ</span>
                                        <span>{amount - bonusToUse} ‚Ç∏</span>
                                    </div>
                                </div>
                                <motion.button onClick={handleOrder} disabled={loading} whileTap={{ scale: 0.95 }}
                                    className="w-full bg-gradient-to-r from-amber-500 to-orange-500 text-white font-bold text-lg py-4 rounded-xl shadow-lg shadow-orange-500/20 flex items-center justify-center gap-3 disabled:opacity-70">
                                    {loading ? (<ArrowPathIcon className="w-6 h-6 animate-spin" />) : ("–û–ø–ª–∞—Ç–∏—Ç—å")}
                                </motion.button>
                            </motion.div>
                        )}
                    </AnimatePresence>
                </section>
            </main>
            <AnimatePresence>
                {showToast && (
                    <motion.div initial={{ opacity: 0, y: 20, scale: 0.9 }} animate={{ opacity: 1, y: 0, scale: 1 }} exit={{ opacity: 0, y: 20, scale: 0.9 }}
                        className="fixed bottom-24 left-1/2 -translate-x-1/2 z-50 bg-slate-800 text-white font-semibold px-6 py-3 rounded-xl shadow-2xl flex items-center gap-3">
                        <CheckCircleIcon className="w-6 h-6 text-emerald-400" />
                        {toastMessage}
                    </motion.div>
                )}
            </AnimatePresence>
        </div>
    );
};

export default Order;