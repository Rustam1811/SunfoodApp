const admin = require('firebase-admin');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
if (!admin.apps.length) {
    try {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å base64 –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ orders.js)
        const b64 = process.env.FIREBASE_KEY_BASE64;
        if (b64) {
            const serviceAccount = JSON.parse(
                Buffer.from(b64, "base64").toString("utf8")
            );
            if (serviceAccount.private_key) {
                serviceAccount.private_key = serviceAccount.private_key.replace(/\\n/g, "\n");
            }
            admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                databaseURL: "https://sunfoodapp-default-rtdb.firebaseio.com/"
            });
        } else {
            // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            const serviceAccount = require('../firebase-key.json');
            admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                databaseURL: "https://sunfoodapp-default-rtdb.firebaseio.com/"
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase Admin:', error);
    }
}

const db = admin.firestore();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const calculateUserLevel = (totalOrders) => {
    if (totalOrders >= 100) return { level: 'VIP', next: null, ordersToNext: 0 };
    if (totalOrders >= 50) return { level: '–≠–∫—Å–ø–µ—Ä—Ç', next: 'VIP', ordersToNext: 100 - totalOrders };
    if (totalOrders >= 10) return { level: '–õ—é–±–∏—Ç–µ–ª—å', next: '–≠–∫—Å–ø–µ—Ä—Ç', ordersToNext: 50 - totalOrders };
    return { level: '–ù–æ–≤–∏—á–æ–∫', next: '–õ—é–±–∏—Ç–µ–ª—å', ordersToNext: 10 - totalOrders };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –±–æ–Ω—É—Å–æ–≤
const getMultiplier = (level) => {
    const multipliers = {
        '–ù–æ–≤–∏—á–æ–∫': 1.0,
        '–õ—é–±–∏—Ç–µ–ª—å': 1.2,
        '–≠–∫—Å–ø–µ—Ä—Ç': 1.5,
        'VIP': 2.0
    };
    return multipliers[level] || 1.0;
};

module.exports = async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Credentials', true);
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
    res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version');

    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }

    if (req.method !== 'GET') {
        return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
    }

    const { userId } = req.query;

    if (!userId) {
        return res.status(400).json({ error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    try {
        console.log('üî• GET /api/user-bonus - userId:', userId);

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userRef = db.collection('users').doc(userId);
        const userDoc = await userRef.get();

        let userData = {};
        if (userDoc.exists) {
            userData = userDoc.data();
            console.log('üî• –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
        } else {
            console.log('üî• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º...');
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            userData = {
                bonusBalance: 0,
                createdAt: new Date(),
                phone: userId
            };
            await userRef.set(userData);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        const ordersSnapshot = await db.collection('orders')
            .where('userId', '==', userId)
            .orderBy('createdAt', 'desc')
            .get();

        const orders = ordersSnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));

        console.log('üî• –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:', orders.length);
        console.log('üî• –ó–∞–∫–∞–∑—ã:', orders.slice(0, 2)); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –∑–∞–∫–∞–∑–∞

        // –ü–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è
        let calculatedBalanceFromOrders = 0;
        orders.forEach(order => {
            if (order.bonusEarned) calculatedBalanceFromOrders += order.bonusEarned;
            if (order.bonusUsed) calculatedBalanceFromOrders -= order.bonusUsed;
        });
        console.log('üî• –ë–∞–ª–∞–Ω—Å –∏–∑ –∑–∞–∫–∞–∑–æ–≤:', calculatedBalanceFromOrders);

        const totalOrders = orders.length;
        const levelInfo = calculateUserLevel(totalOrders);
        const multiplier = getMultiplier(levelInfo.level);

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        console.log('üî• –ò—â–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤ –¥–ª—è userId:', userId);
        const bonusHistorySnapshot = await db.collection('bonusHistory')
            .where('userId', '==', userId)
            .orderBy('date', 'desc')
            .limit(20)
            .get();

        console.log('üî• –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ bonusHistory:', bonusHistorySnapshot.size);

        const history = bonusHistorySnapshot.docs.map(doc => {
            const data = doc.data();
            console.log('üî• –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏:', data);
            return {
                id: doc.id,
                ...data
            };
        });

        // –ü–æ–ª—É—á–∞–µ–º –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        const allHistorySnapshot = await db.collection('bonusHistory')
            .where('userId', '==', userId)
            .get();

        console.log('üî• –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ bonusHistory:', allHistorySnapshot.size);

        const allHistory = allHistorySnapshot.docs.map(doc => doc.data());

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
        const earnedTotal = allHistory
            .filter(item => item.type === 'earned')
            .reduce((sum, item) => sum + item.amount, 0);

        const spentTotal = allHistory
            .filter(item => item.type === 'spent')
            .reduce((sum, item) => sum + item.amount, 0);

        let calculatedBalance = earnedTotal - spentTotal;

        // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–æ–≤
        if (allHistory.length === 0 && calculatedBalanceFromOrders > 0) {
            console.log('üî• –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –∑–∞–∫–∞–∑–æ–≤:', calculatedBalanceFromOrders);
            calculatedBalance = calculatedBalanceFromOrders;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        const currentBalance = userData.bonusBalance || 0;
        if (currentBalance !== calculatedBalance) {
            console.log(`üî• –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å: ${currentBalance} -> ${calculatedBalance}`);
            await userRef.update({ bonusBalance: calculatedBalance });
            userData.bonusBalance = calculatedBalance;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
        const currentMonth = new Date().getMonth();
        const currentYear = new Date().getFullYear();

        const thisMonthHistory = history.filter(item => {
            const itemDate = new Date(item.date);
            return itemDate.getMonth() === currentMonth && itemDate.getFullYear() === currentYear;
        });

        const earnedThisMonth = thisMonthHistory
            .filter(item => item.type === 'earned')
            .reduce((sum, item) => sum + item.amount, 0);

        const spentThisMonth = thisMonthHistory
            .filter(item => item.type === 'spent')
            .reduce((sum, item) => sum + item.amount, 0);

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const bonusData = {
            balance: userData.bonusBalance || 0,
            level: levelInfo.level,
            nextLevel: levelInfo.next,
            ordersToNextLevel: levelInfo.ordersToNext,
            totalOrders,
            multiplier,
            earnedThisMonth,
            spentThisMonth,
            history: history.map(item => ({
                id: item.id,
                type: item.type,
                amount: item.amount,
                description: item.description || `–ó–∞–∫–∞–∑ #${item.orderId || 'Unknown'}`,
                date: item.date
            }))
        };

        console.log('üî• –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å–æ–≤:', bonusData);
        res.status(200).json(bonusData);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            details: error.message
        });
    }
};
