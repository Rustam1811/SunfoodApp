// api/orders.js
const admin = require("firebase-admin");
const testOrders = require('./test-orders');

if (!admin.apps.length) {
  const b64 = process.env.FIREBASE_KEY_BASE64;
  if (!b64) throw new Error("FIREBASE_KEY_BASE64 not set");
  const serviceAccount = JSON.parse(
    Buffer.from(b64, "base64").toString("utf8")
  );
  if (serviceAccount.private_key) {
    serviceAccount.private_key = serviceAccount.private_key.replace(/\\n/g, "\n");
  }
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}
const db = admin.firestore();

module.exports = async function handler(req, res) {
  // CORS
  const origin = req.headers.origin || "";
  if (
    ["http://localhost:5173",
      "https://coffee-addict.vercel.app",
      "https://sunfood-app.vercel.app"
    ].includes(origin)
  ) {
    res.setHeader("Access-Control-Allow-Origin", origin);
  }
  res.setHeader("Access-Control-Allow-Methods", "GET,POST,PUT,OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  if (req.method === "OPTIONS") return res.status(200).end();

  try {
    if (req.method === "GET") {
      const { userId, admin: isAdmin } = req.query;

      if (isAdmin) {
        // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
        const snap = await db
          .collection("orders")
          .orderBy("createdAt", "desc")
          .limit(100)
          .get();

        const orders = snap.docs.map(doc => {
          const d = doc.data();
          return {
            id: doc.id,
            userId: d.userId,
            items: d.items,
            amount: d.amount,
            bonusUsed: d.bonusUsed || 0,
            status: d.status || 'pending',
            date: d.createdAt?.toDate().toISOString(),
            createdAt: d.createdAt?.toDate()
          };
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –¥–µ–º–æ
        const allOrders = [...orders, ...testOrders.map(order => ({
          ...order,
          amount: order.totalAmount,
          date: order.createdAt.toISOString()
        }))];

        return res.status(200).json({ orders: allOrders });
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç–æ–ª—å–∫–æ –µ–≥–æ –∑–∞–∫–∞–∑—ã
        if (!userId) return res.status(400).json({ error: "userId required" });
        const snap = await db
          .collection("orders")
          .where("userId", "==", userId)
          .orderBy("createdAt", "desc")
          .limit(10)
          .get();

        const orders = snap.docs.map(doc => {
          const d = doc.data();
          return {
            id: doc.id,
            items: d.items,
            amount: d.amount,
            bonusEarned: d.bonusEarned,
            status: d.status || 'pending',
            date: d.createdAt?.toDate().toISOString()
          };
        });
        return res.status(200).json(orders);
      }
    }

    if (req.method === "POST") {
      const { userId, items, amount, bonusUsed = 0 } = req.body;
      console.log('üî• POST /api/orders - –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑:', { userId, items, amount, bonusUsed });

      if (!userId || !Array.isArray(items) || typeof amount !== "number") {
        console.log('üî• –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        return res.status(400).json({ error: "Invalid body" });
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const bonusSettingsDoc = await db.collection('settings').doc('bonusSettings').get();
      let bonusSettings = {
        basePercentage: 5,
        levelMultipliers: {
          '–ù–æ–≤–∏—á–æ–∫': 1.0,
          '–õ—é–±–∏—Ç–µ–ª—å': 1.2,
          '–≠–∫—Å–ø–µ—Ä—Ç': 1.5,
          'VIP': 2.0
        }
      };

      if (bonusSettingsDoc.exists) {
        const settings = bonusSettingsDoc.data();
        bonusSettings = { ...bonusSettings, ...settings };
      }

      // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRef = db.collection('users').doc(userId);
      const userDoc = await userRef.get();
      let userData = { bonusBalance: 0, totalOrders: 0 };
      if (userDoc.exists) {
        userData = { ...userData, ...userDoc.data() };
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
      const ordersSnapshot = await db.collection('orders')
        .where('userId', '==', userId)
        .get();
      const totalOrders = ordersSnapshot.size + 1; // +1 –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
      let level = '–ù–æ–≤–∏—á–æ–∫';
      if (totalOrders >= 100) level = 'VIP';
      else if (totalOrders >= 50) level = '–≠–∫—Å–ø–µ—Ä—Ç';
      else if (totalOrders >= 10) level = '–õ—é–±–∏—Ç–µ–ª—å';

      const multiplier = bonusSettings.levelMultipliers[level] || 1.0;
      const bonusEarned = Math.floor(amount * (bonusSettings.basePercentage / 100) * multiplier);

      console.log('üî• –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤:', { level, multiplier, amount, bonusEarned });

      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await db.runTransaction(async (transaction) => {
        // 1) –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
        const orderRef = db.collection("orders").doc();
        transaction.set(orderRef, {
          userId,
          items,
          amount,
          bonusUsed,
          bonusEarned,
          status: 'pending',
          createdAt: admin.firestore.FieldValue.serverTimestamp(),
        });

        // 2) –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newBalance = (userData.bonusBalance || 0) + bonusEarned - bonusUsed;
        transaction.set(userRef, {
          bonusBalance: newBalance,
          totalOrders: totalOrders,
          level: level,
          lastOrderAt: admin.firestore.FieldValue.serverTimestamp()
        }, { merge: true });

        // 3) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤ - –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
        if (bonusEarned > 0) {
          const earnedHistoryRef = db.collection('bonusHistory').doc();
          transaction.set(earnedHistoryRef, {
            userId: userId,
            type: 'earned',
            amount: bonusEarned,
            description: `–ó–∞–∫–∞–∑ #${orderRef.id.slice(-6)}`,
            date: new Date().toISOString(),
            orderId: orderRef.id,
            multiplier: multiplier,
            level: level
          });
        }

        // 4) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤ - –ø–æ—Ç—Ä–∞—á–µ–Ω–æ
        if (bonusUsed > 0) {
          const spentHistoryRef = db.collection('bonusHistory').doc();
          transaction.set(spentHistoryRef, {
            userId: userId,
            type: 'spent',
            amount: bonusUsed,
            description: `–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #${orderRef.id.slice(-6)}`,
            date: new Date().toISOString(),
            orderId: orderRef.id
          });
        }
      });

      console.log('üî• –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç');

      return res.status(200).json({
        success: true,
        bonusEarned,
        multiplier,
        level,
        message: `–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–∞—á–∏—Å–ª–µ–Ω–æ ${bonusEarned} –±–æ–Ω—É—Å–æ–≤ (x${multiplier})`
      });
    }

    if (req.method === "PUT") {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
      const { orderId, status } = req.body;

      if (!orderId || !status) {
        return res.status(400).json({ error: 'orderId and status required' });
      }

      const validStatuses = ['pending', 'accepted', 'ready', 'completed'];
      if (!validStatuses.includes(status)) {
        return res.status(400).json({ error: 'Invalid status' });
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const orderRef = db.collection("orders").doc(orderId);
      const orderDoc = await orderRef.get();

      if (!orderDoc.exists) {
        return res.status(404).json({ error: 'Order not found' });
      }

      const orderData = orderDoc.data();
      console.log('üî• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', orderId, '—Å', orderData.status, '–Ω–∞', status);

      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ completed –∏ —Ä–∞–Ω–µ–µ –Ω–µ –±—ã–ª completed
      if (status === 'completed' && orderData.status !== 'completed') {
        console.log('üî• –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã');

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤
        const bonusSettingsSnap = await db.collection('bonusSettings').doc('main').get();
        const bonusSettings = bonusSettingsSnap.exists ? bonusSettingsSnap.data() : { basePercentage: 5 };

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è
        const userRef = db.collection('users').doc(orderData.userId);
        const userDoc = await userRef.get();
        let userData = userDoc.exists ? userDoc.data() : { bonusBalance: 0 };

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        const userOrdersSnap = await db.collection('orders')
          .where('userId', '==', orderData.userId)
          .where('status', '==', 'completed')
          .get();

        const completedOrders = userOrdersSnap.size;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å
        let level = '–ù–æ–≤–∏—á–æ–∫';
        let multiplier = 1.0;

        if (completedOrders >= 100) {
          level = 'VIP';
          multiplier = 2.0;
        } else if (completedOrders >= 50) {
          level = '–≠–∫—Å–ø–µ—Ä—Ç';
          multiplier = 1.5;
        } else if (completedOrders >= 10) {
          level = '–õ—é–±–∏—Ç–µ–ª—å';
          multiplier = 1.2;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã)
        let bonusEarned = orderData.bonusEarned || 0;

        if (bonusEarned === 0) {
          bonusEarned = Math.floor(orderData.amount * (bonusSettings.basePercentage / 100) * multiplier);
          console.log('üî• –†–∞—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –±–æ–Ω—É—Å–æ–≤:', { level, multiplier, amount: orderData.amount, bonusEarned });
        } else {
          console.log('üî• –ë–æ–Ω—É—Å—ã —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã:', bonusEarned);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newBalance = (userData.bonusBalance || 0) + bonusEarned;
        await userRef.update({ bonusBalance: newBalance });

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤
        if (bonusEarned > 0) {
          const earnedHistoryRef = db.collection('bonusHistory').doc();
          await earnedHistoryRef.set({
            userId: orderData.userId,
            type: 'earned',
            amount: bonusEarned,
            description: `–ó–∞–∫–∞–∑ #${orderId} –∑–∞–≤–µ—Ä—à–µ–Ω`,
            orderId: orderId,
            date: new Date().toISOString()
          });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏
        await orderRef.update({
          status,
          bonusEarned,
          updatedAt: admin.firestore.FieldValue.serverTimestamp()
        });

        console.log('üî• –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã:', bonusEarned, '–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:', newBalance);

        return res.status(200).json({
          success: true,
          message: `Order completed! Earned ${bonusEarned} bonus points`,
          orderId,
          status,
          bonusEarned,
          newBalance
        });
      } else {
        // –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        await orderRef.update({
          status,
          updatedAt: admin.firestore.FieldValue.serverTimestamp()
        });

        return res.status(200).json({
          success: true,
          message: 'Order status updated',
          orderId,
          status
        });
      }
    }

    res.status(405).end();
  } catch (e) {
    console.error("üî• Orders Error:", e);
    res.status(500).json({ error: "Server error" });
  }
};
